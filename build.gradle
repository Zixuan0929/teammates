plugins {
    id 'java' // Apply the Java plugin
    id 'jacoco' // Apply JaCoCo plugin for code coverage
    id 'checkstyle' // Apply Checkstyle plugin for code quality
    id 'com.gradle.build-scan' version '3.1.2' // Apply Gradle Build Scan plugin
}

// Define repositories to resolve dependencies
repositories {
    mavenCentral() // Use Maven Central repository
}

// Define dependencies
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.7.6' // Example dependency for Spring Boot
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2' // JUnit Jupiter API for testing
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2' // JUnit Jupiter Engine for running tests
}

// Configure Java compatibility
sourceCompatibility = '11'
targetCompatibility = '11'

// Package the application into a JAR file
jar {
    manifest {
        attributes(
            'Implementation-Title': 'TEAMMATES Project',
            'Implementation-Version': version
        )
    }
}

// Configure JaCoCo for code coverage
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    useJUnitPlatform() // Use JUnit Platform for running tests
    finalizedBy jacocoTestReport // Generate code coverage report after tests
}

// Configure Checkstyle for code quality
checkstyle {
    toolVersion = '10.1'
    config = rootProject.file('config/checkstyle/checkstyle.xml') // Ensure this path is correct
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Task to generate a build summary report
task buildSummaryReport {
    description = 'Generates a summary report on the build process'
    group = 'Reporting'
    doLast {
        def reportFile = file("$buildDir/reports/buildSummary.txt")
        reportFile.withPrintWriter { writer ->
            writer.println("Build Summary Report")
            writer.println("=====================")
            writer.println("Build Time: ${new Date()}")
            writer.println("Build Status: ${gradle.startParameter.taskNames.contains('build') ? 'Completed' : 'Failed'}")
            writer.println("Total Tasks: ${gradle.taskGraph.allTasks.size()}")
            writer.println("Executed Tasks: ${gradle.taskGraph.allTasks.findAll { it.state.failure != null }.size()}")
            writer.println("Build Directory: ${buildDir}")
        }
        println "Build summary report generated at: $reportFile"
    }
}

// Ensure that buildSummaryReport task runs after build
build.finalizedBy buildSummaryReport

// Configure Gradle Build Scan
gradleEnterprise {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
        publishAlways()
    }
}
